"use strict";(self.webpackChunk_inversifyjs_inversify_docs_site=self.webpackChunk_inversifyjs_inversify_docs_site||[]).push([["3320"],{4567:function(e){e.exports=JSON.parse('{"version":{"pluginId":"default","version":"6.x","label":"6.x","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-6.x","isLast":false,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Introduction","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Getting started","href":"/docs/6.x/introduction/getting-started","docId":"introduction/getting-started","unlisted":false},{"type":"link","label":"Dependency inversion","href":"/docs/6.x/introduction/dependency-inversion","docId":"introduction/dependency-inversion","unlisted":false}]},{"type":"category","label":"Fundamentals","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Binding","href":"/docs/6.x/fundamentals/binding","docId":"fundamentals/binding","unlisted":false},{"type":"link","label":"DI Hierarchy","href":"/docs/6.x/fundamentals/di-hierarchy","docId":"fundamentals/di-hierarchy","unlisted":false},{"type":"category","label":"Lifecycle","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Activation","href":"/docs/6.x/fundamentals/lifecycle/activation","docId":"fundamentals/lifecycle/activation","unlisted":false},{"type":"link","label":"Deactivation","href":"/docs/6.x/fundamentals/lifecycle/deactivation","docId":"fundamentals/lifecycle/deactivation","unlisted":false},{"type":"link","label":"Middleware","href":"/docs/6.x/fundamentals/lifecycle/middleware","docId":"fundamentals/lifecycle/middleware","unlisted":false}]},{"type":"link","label":"Inheritance","href":"/docs/6.x/fundamentals/inheritance","docId":"fundamentals/inheritance","unlisted":false},{"type":"link","label":"Snapshot","href":"/docs/6.x/fundamentals/snapshot","docId":"fundamentals/snapshot","unlisted":false}]},{"type":"category","label":"API","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Binding Syntax","href":"/docs/6.x/api/binding-syntax","docId":"api/binding-syntax","unlisted":false},{"type":"link","label":"Container","href":"/docs/6.x/api/container","docId":"api/container","unlisted":false},{"type":"link","label":"Container Module","href":"/docs/6.x/api/container-module","docId":"api/container-module","unlisted":false},{"type":"link","label":"Decorator","href":"/docs/6.x/api/decorator","docId":"api/decorator","unlisted":false},{"type":"link","label":"LazyServiceIdentifier","href":"/docs/6.x/api/lazy-service-identifier","docId":"api/lazy-service-identifier","unlisted":false},{"type":"link","label":"ServiceIdentifier","href":"/docs/6.x/api/service-identifier","docId":"api/service-identifier","unlisted":false}]}]},"docs":{"api/binding-syntax":{"id":"api/binding-syntax","title":"Binding Syntax","description":"Binding syntax is provided as a fluent interface resulting from using the container API or the container module API.","sidebar":"tutorialSidebar"},"api/container":{"id":"api/container","title":"Container","description":"The InversifyJS container is where dependencies are first configured through binding and, possibly later, reconfigured and removed. The container can be worked on directly in this regard or container modules can be utilized.","sidebar":"tutorialSidebar"},"api/container-module":{"id":"api/container-module","title":"Container Module","description":"Container modules help manage the complexity of bindings in large applications.","sidebar":"tutorialSidebar"},"api/decorator":{"id":"api/decorator","title":"Decorator","description":"This section covers Inversify decorators used to provide class metadata.","sidebar":"tutorialSidebar"},"api/lazy-service-identifier":{"id":"api/lazy-service-identifier","title":"LazyServiceIdentifier","description":"Overview","sidebar":"tutorialSidebar"},"api/service-identifier":{"id":"api/service-identifier","title":"ServiceIdentifier","description":"Overview","sidebar":"tutorialSidebar"},"fundamentals/binding":{"id":"fundamentals/binding","title":"Binding","description":"A binding represents the relationship between a service identifier and its resolution. Bindings are added to a container to configure it to provide services.","sidebar":"tutorialSidebar"},"fundamentals/di-hierarchy":{"id":"fundamentals/di-hierarchy","title":"DI Hierarchy","description":"InversifyJS is a popular library for implementing inversion of control (IoC) and dependency injection (DI) in TypeScript applications. It supports hierarchical dependency injection, which can be a powerful tool in complex applications.","sidebar":"tutorialSidebar"},"fundamentals/inheritance":{"id":"fundamentals/inheritance","title":"Inheritance","description":"Inheritance can be achieved as long as constructor parameters are properly decorated. There are two ways to ensure this:","sidebar":"tutorialSidebar"},"fundamentals/lifecycle/activation":{"id":"fundamentals/lifecycle/activation","title":"Activation","description":"Whenever a service is resolved, the activation event is dispatched. An activation handler receives a context and a resolved value and returns the handled resolved value.","sidebar":"tutorialSidebar"},"fundamentals/lifecycle/deactivation":{"id":"fundamentals/lifecycle/deactivation","title":"Deactivation","description":"Whenever a singleton scoped service is unbound, the deactivation event is dispatched. A deactivation handler receives a resolved value and returns nothing.","sidebar":"tutorialSidebar"},"fundamentals/lifecycle/middleware":{"id":"fundamentals/lifecycle/middleware","title":"Middleware","description":"Middleware docs are included for historical reasons. They are likely to be remove in favor of more appropiate features.","sidebar":"tutorialSidebar"},"fundamentals/snapshot":{"id":"fundamentals/snapshot","title":"Snapshot","description":"Snapshots allow you to save the state of your Inversify container at a specific moment in time. These snapshots capture the container\'s state, enabling you to revert back to that state if needed.","sidebar":"tutorialSidebar"},"introduction/dependency-inversion":{"id":"introduction/dependency-inversion","title":"Dependency inversion","description":"To apply the dependency inversion principle, you can use injection symbols:","sidebar":"tutorialSidebar"},"introduction/getting-started":{"id":"introduction/getting-started","title":"Getting started","description":"Start by installing inversify and reflect-metadata:","sidebar":"tutorialSidebar"}}}}')}}]);