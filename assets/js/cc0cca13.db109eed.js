"use strict";(self.webpackChunk_inversifyjs_inversify_docs_site=self.webpackChunk_inversifyjs_inversify_docs_site||[]).push([["1585"],{8794:function(n,e,i){i.r(e),i.d(e,{frontMatter:()=>f,toc:()=>b,default:()=>T,metadata:()=>a,assets:()=>w,contentTitle:()=>y});var a=JSON.parse('{"id":"api/binding-syntax","title":"Binding Syntax","description":"Binding syntax is provided as a fluent interface resulting from using the container API or the container module API.","source":"@site/docs/api/binding-syntax.mdx","sourceDirName":"api","slug":"/api/binding-syntax","permalink":"/docs/next/api/binding-syntax","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Binding Syntax"},"sidebar":"tutorialSidebar","previous":{"title":"Snapshot","permalink":"/docs/next/fundamentals/snapshot"},"next":{"title":"Container","permalink":"/docs/next/api/container"}}'),t=i(4076),s=i(9221),r=i(8530),d=i(5172),o=i(653),l=i(8448),c=i(5502),h=i(7552),g=i(2792),u=i(4514),x=i(9603),v=i(4661),p=i(7058),m=i(6789),j=i(7419);let f={sidebar_position:1,title:"Binding Syntax"},y="Binding Syntax",w={},b=[{value:"BoundServiceSyntax",id:"boundservicesyntax",level:2},{value:"getIdentifier",id:"getidentifier",level:3},{value:"BindToFluentSyntax",id:"bindtofluentsyntax",level:2},{value:"to",id:"to",level:3},{value:"toSelf",id:"toself",level:3},{value:"toConstantValue",id:"toconstantvalue",level:3},{value:"toDynamicValue",id:"todynamicvalue",level:3},{value:"toFactory",id:"tofactory",level:3},{value:"toProvider",id:"toprovider",level:3},{value:"toResolvedValue",id:"toresolvedvalue",level:3},{value:"toService",id:"toservice",level:3},{value:"BindInFluentSyntax",id:"bindinfluentsyntax",level:2},{value:"inSingletonScope",id:"insingletonscope",level:3},{value:"inTransientScope",id:"intransientscope",level:3},{value:"inRequestScope",id:"inrequestscope",level:3},{value:"BindOnFluentSyntax",id:"bindonfluentsyntax",level:2},{value:"onActivation",id:"onactivation",level:3},{value:"onDeactivation",id:"ondeactivation",level:3},{value:"BindWhenFluentSyntax",id:"bindwhenfluentsyntax",level:2},{value:"when",id:"when",level:3},{value:"whenAnyAncestor",id:"whenanyancestor",level:3},{value:"whenAnyAncestorIs",id:"whenanyancestoris",level:3},{value:"whenAnyAncestorNamed",id:"whenanyancestornamed",level:3},{value:"whenAnyAncestorTagged",id:"whenanyancestortagged",level:3},{value:"whenDefault",id:"whendefault",level:3},{value:"whenNamed",id:"whennamed",level:3},{value:"whenNoAncestor",id:"whennoancestor",level:3},{value:"whenNoAncestorIs",id:"whennoancestoris",level:3},{value:"whenNoAncestorNamed",id:"whennoancestornamed",level:3},{value:"whenNoAncestorTagged",id:"whennoancestortagged",level:3},{value:"whenNoParent",id:"whennoparent",level:3},{value:"whenNoParentIs",id:"whennoparentis",level:3},{value:"whenNoParentNamed",id:"whennoparentnamed",level:3},{value:"whenNoParentTagged",id:"whennoparenttagged",level:3},{value:"whenParent",id:"whenparent",level:3},{value:"whenParentIs",id:"whenparentis",level:3},{value:"whenParentNamed",id:"whenparentnamed",level:3},{value:"whenParentTagged",id:"whenparenttagged",level:3},{value:"whenTagged",id:"whentagged",level:3},{value:"BindWhenOnFluentSyntax",id:"bindwhenonfluentsyntax",level:2},{value:"BindInWhenOnFluentSyntax",id:"bindinwhenonfluentsyntax",level:2}];function S(n){let e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"binding-syntax",children:"Binding Syntax"})}),"\n",(0,t.jsxs)(e.p,{children:["Binding syntax is provided as a fluent interface resulting from using the ",(0,t.jsx)(e.a,{href:"/docs/next/api/container#bind",children:"container API"})," or the ",(0,t.jsx)(e.a,{href:"/docs/next/api/container-module#bind",children:"container module API"}),"."]}),"\n",(0,t.jsx)(e.h2,{id:"boundservicesyntax",children:"BoundServiceSyntax"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"interface BoundServiceSyntax {\n  getIdentifier(): BindingIdentifier;\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"Base interface implemented by all binding syntax interfaces. Provides access to the binding's unique identifier."}),"\n",(0,t.jsx)(e.h3,{id:"getidentifier",children:"getIdentifier"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"getIdentifier(): BindingIdentifier;\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Returns a unique identifier for this specific binding. This identifier can be used with ",(0,t.jsx)(e.code,{children:"container.unbind()"})," to remove just this binding, rather than all bindings for a service."]}),"\n",(0,t.jsx)(e.p,{children:"Example:"}),"\n",(0,t.jsx)(j.Z,{language:"ts",children:p}),"\n",(0,t.jsx)(e.h2,{id:"bindtofluentsyntax",children:"BindToFluentSyntax"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"interface BindToFluentSyntax<T> extends BoundServiceSyntax {\n  // ...\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Represents a service binding given a service identifier. Implements ",(0,t.jsx)(e.code,{children:"BoundServiceSyntax"})," to provide access to the binding's unique identifier."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"const bindingToSyntax = container.bind('service-id');\n"})}),"\n",(0,t.jsx)(e.p,{children:'Further documentation refers to this service identifier as the "given service identifier".'}),"\n",(0,t.jsx)(e.h3,{id:"to",children:"to"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"to(type: Newable<T>): BindInWhenOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Binds a class instantiation to the given service binding. Whenever the service is resolved, the class constructor will be invoked to build the resolved value."}),"\n",(0,t.jsx)(j.Z,{language:"ts",children:d}),"\n",(0,t.jsx)(e.h3,{id:"toself",children:"toSelf"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"toSelf(): BindInWhenOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"If the given service identifier is a class, establish a type binding to that class."}),"\n",(0,t.jsx)(j.Z,{language:"ts",children:x}),"\n",(0,t.jsx)(e.h3,{id:"toconstantvalue",children:"toConstantValue"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"toConstantValue(value: T): BindWhenOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Binds a value in singleton scope to the given service identifier."}),"\n",(0,t.jsx)(j.Z,{language:"ts",children:o}),"\n",(0,t.jsx)(e.h3,{id:"todynamicvalue",children:"toDynamicValue"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"toDynamicValue(builder: DynamicValueBuilder<T>): BindInWhenOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Binds a function to the given service identifier. Whenever the service is resolved, the function passed will be invoked to build the resolved value."}),"\n",(0,t.jsx)(e.admonition,{type:"info",children:(0,t.jsx)(e.p,{children:"Keep in mind a service is not resolved if it's cached in the current scope."})}),"\n",(0,t.jsx)(j.Z,{language:"ts",children:l}),"\n",(0,t.jsx)(e.h3,{id:"tofactory",children:"toFactory"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"toFactory(\n  factory: T extends Factory<unknown, any>\n    ? (context: ResolutionContext) => T\n    : never,\n): BindWhenOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Binds a factory to the given service identifier. Whenever the service is resolved, the factory will be passed as the resolved value."}),"\n",(0,t.jsx)(j.Z,{language:"ts",children:c}),"\n",(0,t.jsx)(e.h3,{id:"toprovider",children:"toProvider"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"toProvider(\n  provider: T extends Provider<unknown, any>\n    ? (context: ResolutionContext) => T\n    : never,\n): BindWhenOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Binds a provider of services associated with a target service identifier to the given service identifier. A provider is just an asynchronous factory."}),"\n",(0,t.jsx)(j.Z,{language:"ts",children:h}),"\n",(0,t.jsx)(e.h3,{id:"toresolvedvalue",children:"toResolvedValue"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"toResolvedValue(factory: () => T): BindInWhenOnFluentSyntax<T>;\ntoResolvedValue<TArgs extends unknown[] = any[]>(\n  factory: (...args: TArgs) => T,\n  injectOptions?: MapToResolvedValueInjectOptions<TArgs>,\n): BindInWhenOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Binds a value to a service identifier. This value is generated on top of a function that receives resolved services. You can specify the services to be resolved by passing the service identifiers as arguments:"}),"\n",(0,t.jsx)(j.Z,{language:"ts",children:g}),"\n",(0,t.jsx)(e.p,{children:"You can also provide more detailed options in order to received resolved services:"}),"\n",(0,t.jsx)(j.Z,{language:"ts",children:u}),"\n",(0,t.jsx)(e.h3,{id:"toservice",children:"toService"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"toService(service: ServiceIdentifier<T>): void;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Binds the services bound to a target service identifier to the given service identifier."}),"\n",(0,t.jsx)(j.Z,{language:"ts",children:v}),"\n",(0,t.jsx)(e.h2,{id:"bindinfluentsyntax",children:"BindInFluentSyntax"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"interface BindInFluentSyntax<T> extends BoundServiceSyntax {\n  // ...\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Represents a service binding given a service identifier and a service resolution such as a constructor, a factory, or a provider. Implements ",(0,t.jsx)(e.code,{children:"BoundServiceSyntax"})," to provide access to the binding's unique identifier."]}),"\n",(0,t.jsx)(e.h3,{id:"insingletonscope",children:"inSingletonScope"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"inSingletonScope(): BindWhenOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Sets the binding scope to singleton. Refer to the ",(0,t.jsx)(e.a,{href:"/docs/next/fundamentals/binding#singleton",children:"docs"})," for more information."]}),"\n",(0,t.jsx)(e.h3,{id:"intransientscope",children:"inTransientScope"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"inTransientScope(): BindWhenOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Sets the binding scope to transient. Refer to the ",(0,t.jsx)(e.a,{href:"/docs/next/fundamentals/binding#transient",children:"docs"})," for more information."]}),"\n",(0,t.jsx)(e.h3,{id:"inrequestscope",children:"inRequestScope"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"inRequestScope(): BindWhenOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Sets the binding scope to request. Refer to the ",(0,t.jsx)(e.a,{href:"/docs/next/fundamentals/binding#request",children:"docs"})," for more information."]}),"\n",(0,t.jsx)(e.h2,{id:"bindonfluentsyntax",children:"BindOnFluentSyntax"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"interface BindOnFluentSyntax<T> extends BoundServiceSyntax {\n  // ...\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Allows setting binding activation and deactivation handlers. Implements ",(0,t.jsx)(e.code,{children:"BoundServiceSyntax"})," to provide access to the binding's unique identifier."]}),"\n",(0,t.jsx)(e.h3,{id:"onactivation",children:"onActivation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"onActivation(activation: BindingActivation<T>): BindWhenFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Sets a binding activation handler. The activation handler is invoked after a dependency has been resolved and before it is added to a scope cache. The activation handler will not be invoked if the dependency is taken from a scope cache."}),"\n",(0,t.jsx)(j.Z,{language:"ts",children:r}),"\n",(0,t.jsx)(e.h3,{id:"ondeactivation",children:"onDeactivation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"onDeactivation(deactivation: BindingDeactivation<T>): BindWhenFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Sets a binding deactivation handler on a singleton scope binding. The deactivation handler is called when the binding is unbound from a container."}),"\n",(0,t.jsx)(e.admonition,{type:"warning",children:(0,t.jsx)(e.p,{children:"Only singleton scoped bindings can have deactivation handlers. If you try to add a deactivation handler to a non-singleton binding, an error will be thrown."})}),"\n",(0,t.jsx)(e.h2,{id:"bindwhenfluentsyntax",children:"BindWhenFluentSyntax"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"interface BindWhenFluentSyntax<T> extends BoundServiceSyntax {\n  // ...\n}\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Allows setting binding constraints. Implements ",(0,t.jsx)(e.code,{children:"BoundServiceSyntax"})," to provide access to the binding's unique identifier."]}),"\n",(0,t.jsx)(e.h3,{id:"when",children:"when"}),"\n",(0,t.jsx)(e.p,{children:"Sets a constraint for the current binding."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"when(\n  constraint: (metadata: BindingConstraints) => boolean,\n): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(j.Z,{language:"ts",children:m}),"\n",(0,t.jsx)(e.p,{children:"In the previous example, a custom constraint is implemented to use the binding if and only if the target name is a certain one."}),"\n",(0,t.jsx)(e.h3,{id:"whenanyancestor",children:"whenAnyAncestor"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenAnyAncestor(\n  constraint: (metadata: BindingConstraints) => boolean,\n): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a constraint, any ancestor service matches the given constraint."}),"\n",(0,t.jsx)(e.h3,{id:"whenanyancestoris",children:"whenAnyAncestorIs"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenAnyAncestorIs(\n  serviceIdentifier: ServiceIdentifier,\n): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a service identifier, any ancestor service was requested with the given identifier."}),"\n",(0,t.jsx)(e.h3,{id:"whenanyancestornamed",children:"whenAnyAncestorNamed"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenAnyAncestorNamed(name: MetadataName): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a name, a named parent service was requested with the given name."}),"\n",(0,t.jsx)(e.h3,{id:"whenanyancestortagged",children:"whenAnyAncestorTagged"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenAnyAncestorTagged(\n  tag: MetadataTag,\n  tagValue: unknown,\n): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a tag, a tagged parent service was requested with the given tag."}),"\n",(0,t.jsx)(e.h3,{id:"whendefault",children:"whenDefault"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenDefault(): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if the service is not requested with any name nor tags."}),"\n",(0,t.jsx)(e.h3,{id:"whennamed",children:"whenNamed"}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a name, a named service is requested with the given name."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenNamed(name: MetadataName): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.h3,{id:"whennoancestor",children:"whenNoAncestor"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenNoAncestor(\n  constraint: (metadata: BindingConstraints) => boolean,\n): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a constraint, no ancestor service matches the given constraint."}),"\n",(0,t.jsx)(e.h3,{id:"whennoancestoris",children:"whenNoAncestorIs"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenNoAncestorIs(serviceIdentifier: ServiceIdentifier): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a service identifier, no ancestor service was requested with the given identifier."}),"\n",(0,t.jsx)(e.h3,{id:"whennoancestornamed",children:"whenNoAncestorNamed"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenNoAncestorNamed(name: MetadataName): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a name, no ancestor service was requested with the given name."}),"\n",(0,t.jsx)(e.h3,{id:"whennoancestortagged",children:"whenNoAncestorTagged"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenNoAncestorTagged(\n  tag: MetadataTag,\n  tagValue: unknown,\n): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a tag, no ancestor service was requested with the given tag."}),"\n",(0,t.jsx)(e.h3,{id:"whennoparent",children:"whenNoParent"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenNoParent(\n  constraint: (metadata: BindingConstraints) => boolean,\n): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a constraint, no parent service matches the given constraint."}),"\n",(0,t.jsx)(e.h3,{id:"whennoparentis",children:"whenNoParentIs"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenNoParentIs(serviceIdentifier: ServiceIdentifier): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a service identifier, no parent service was requested with the given identifier."}),"\n",(0,t.jsx)(e.h3,{id:"whennoparentnamed",children:"whenNoParentNamed"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenNoParentNamed(name: MetadataName): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a name, no parent service was requested with the given name."}),"\n",(0,t.jsx)(e.h3,{id:"whennoparenttagged",children:"whenNoParentTagged"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenNoParentTagged(\n  tag: MetadataTag,\n  tagValue: unknown,\n): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a tag, no parent service was requested with the given tag."}),"\n",(0,t.jsx)(e.h3,{id:"whenparent",children:"whenParent"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenParent(\n  constraint: (metadata: BindingConstraints) => boolean,\n): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a constraint, the parent service matches the given constraint."}),"\n",(0,t.jsx)(e.h3,{id:"whenparentis",children:"whenParentIs"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenParentIs(serviceIdentifier: ServiceIdentifier): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a service identifier, the parent service was requested with the given identifier."}),"\n",(0,t.jsx)(e.h3,{id:"whenparentnamed",children:"whenParentNamed"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenParentNamed(name: MetadataName): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a name, the parent service was requested with the given name."}),"\n",(0,t.jsx)(e.h3,{id:"whenparenttagged",children:"whenParentTagged"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenParentTagged(tag: MetadataTag, tagValue: unknown): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a tag, the parent service was requested with the given tag."}),"\n",(0,t.jsx)(e.h3,{id:"whentagged",children:"whenTagged"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"whenTagged(tag: MetadataTag, tagValue: unknown): BindOnFluentSyntax<T>;\n"})}),"\n",(0,t.jsx)(e.p,{children:"Constrains the binding to be used if and only if, given a tag, a tagged service is requested with the given tag."}),"\n",(0,t.jsx)(e.h2,{id:"bindwhenonfluentsyntax",children:"BindWhenOnFluentSyntax"}),"\n",(0,t.jsxs)(e.p,{children:["The union of ",(0,t.jsx)(e.a,{href:"#bindwhenfluentsyntax",children:"BindWhenFluentSyntax"})," and ",(0,t.jsx)(e.a,{href:"#bindonfluentsyntax",children:"BindOnFluentSyntax"}),"."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"export interface BindWhenOnFluentSyntax<T>\n  extends BindWhenFluentSyntax<T>,\n    BindOnFluentSyntax<T> {}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"bindinwhenonfluentsyntax",children:"BindInWhenOnFluentSyntax"}),"\n",(0,t.jsxs)(e.p,{children:["The union of ",(0,t.jsx)(e.a,{href:"#bindinfluentsyntax",children:"BindInFluentSyntax"})," and ",(0,t.jsx)(e.a,{href:"#bindwhenonfluentsyntax",children:"BindWhenOnFluentSyntax"}),"."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:"export interface BindInWhenOnFluentSyntax<T>\n  extends BindInFluentSyntax<T>,\n    BindWhenOnFluentSyntax<T> {}\n"})})]})}function T(n={}){let{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(S,{...n})}):S(n)}},8530:function(n){n.exports="@injectable()\nclass Katana {\n  public use(): string {\n    return 'hit!';\n  }\n}\n\ncontainer\n  .bind<Katana>('Katana')\n  .to(Katana)\n  .onActivation((_context: ResolutionContext, katana: Katana) => {\n    const handler: ProxyHandler<() => string> = {\n      apply: function (\n        target: () => string,\n        thisArgument: unknown,\n        argumentsList: [],\n      ) {\n        console.log(`Starting: ${new Date().getTime().toString()}`);\n        const result: string = target.apply(thisArgument, argumentsList);\n        console.log(`Finished: ${new Date().getTime().toString()}`);\n        return result;\n      },\n    };\n\n    katana.use = new Proxy(katana.use.bind(katana), handler);\n\n    return katana;\n  });"},7058:function(n){n.exports="const container: Container = new Container();\n\n// The identifier can be used to unbind this specific binding later\nexport const bindingIdentifier: BindingIdentifier = container\n  .bind('MyService')\n  .to(MyServiceImpl)\n  .getIdentifier();"},5172:function(n){n.exports="const container: Container = new Container();\ncontainer.bind<Weapon>('Weapon').to(Katana);\n\nconst katana: Weapon = container.get<Weapon>('Weapon');"},653:function(n){n.exports="const container: Container = new Container();\ncontainer.bind<Weapon>('Weapon').toConstantValue(new Katana());\n\nconst katana: Weapon = container.get<Weapon>('Weapon');"},8448:function(n){n.exports="const container: Container = new Container();\ncontainer.bind<Weapon>('Weapon').toDynamicValue((): Weapon => new Katana());\n\nconst katana: Weapon = container.get<Weapon>('Weapon');"},5502:function(n){n.exports="container.bind<Engine>('Engine').to(PetrolEngine).whenNamed('petrol');\ncontainer.bind<Engine>('Engine').to(DieselEngine).whenNamed('diesel');\n\ncontainer\n  .bind<Factory<(displacement: number) => Engine, [string]>>('Factory<Engine>')\n  .toFactory((context: ResolutionContext) => {\n    return (named: string) => (displacement: number) => {\n      const engine: Engine = context.get<Engine>('Engine', {\n        name: named,\n      });\n      engine.displacement = displacement;\n      return engine;\n    };\n  });\n\n@injectable()\nclass DieselCarFactory implements CarFactory {\n  readonly #dieselFactory: (displacement: number) => Engine;\n\n  constructor(\n    @inject('Factory<Engine>')\n    factory: (category: string) => (displacement: number) => Engine, // Injecting an engine factory\n  ) {\n    // Creating a diesel engine factory\n    this.#dieselFactory = factory('diesel');\n  }\n\n  public createEngine(displacement: number): Engine {\n    // Creating a concrete diesel engine\n    return this.#dieselFactory(displacement);\n  }\n}"},7552:function(n){n.exports="const container: Container = new Container();\n\ninterface Sword {\n  material: string;\n  damage: number;\n}\n\n@injectable()\nclass Katana implements Sword {\n  public material!: string;\n  public damage!: number;\n}\n\ntype SwordProvider = (material: string, damage: number) => Promise<Sword>;\n\ncontainer.bind<Sword>('Sword').to(Katana);\n\ncontainer\n  .bind<SwordProvider>('SwordProvider')\n  .toProvider((context: ResolutionContext) => {\n    return async (material: string, damage: number): Promise<Sword> => {\n      // Custom args!\n      return new Promise<Sword>(\n        (resolve: (value: Sword | PromiseLike<Sword>) => void) => {\n          setTimeout(() => {\n            const katana: Sword = context.get<Sword>('Sword');\n            katana.material = material;\n            katana.damage = damage;\n            resolve(katana);\n          }, 10);\n        },\n      );\n    };\n  });\n\nconst katanaProvider: SwordProvider =\n  container.get<SwordProvider>('SwordProvider');\n\nconst powerfulGoldKatana: Promise<Sword> = katanaProvider('gold', 100);\n\nconst notSoPowerfulGoldKatana: Promise<Sword> = katanaProvider('gold', 10);"},2792:function(n){n.exports="const container: Container = new Container();\n\ncontainer.bind(Katana).toSelf();\ncontainer\n  .bind<Weapon>('Weapon')\n  .toResolvedValue((weapon: Weapon): Weapon => weapon, [Katana]);\n\nconst katana: Weapon = container.get<Weapon>('Weapon');"},4514:function(n){n.exports="const container: Container = new Container();\n\ncontainer.bind(Katana).toSelf().whenNamed('katana');\n\ncontainer.bind<Arsenal>('Arsenal').toResolvedValue(\n  (weapon: Weapon): Arsenal => ({\n    weapons: [weapon],\n  }),\n  [\n    {\n      name: 'katana',\n      serviceIdentifier: Katana,\n    },\n  ],\n);\n\nconst arsenal: Arsenal = container.get('Arsenal');"},9603:function(n){n.exports="const container: Container = new Container();\ncontainer.bind<Weapon>(Katana).toSelf();\n\nconst katana: Weapon = container.get<Weapon>(Katana);"},4661:function(n){n.exports="const container: Container = new Container();\n\ncontainer.bind(lorcanaCardCatalogProviderSymbol).to(LorcanaCardCatalogProvider);\ncontainer.bind(mtgCardCatalogProviderSymbol).to(MtgCardCatalogProvider);\n\ncontainer\n  .bind(cardCatalogProviderSymbol)\n  .toService(lorcanaCardCatalogProviderSymbol);\ncontainer\n  .bind(cardCatalogProviderSymbol)\n  .toService(mtgCardCatalogProviderSymbol);\n\nconst cardCatalogProviders: CardCatalogProvider<unknown>[] = container.getAll(\n  cardCatalogProviderSymbol,\n);"},6789:function(n){n.exports="const ninjaId: symbol = Symbol.for('Ninja');\nconst weaponId: symbol = Symbol.for('Weapon');\n\n@injectable()\nclass Ninja {\n  constructor(\n    @inject(weaponId)\n    @named('shuriken')\n    public readonly weapon: Weapon,\n  ) {}\n}\n\ncontainer.bind<Ninja>(ninjaId).to(Ninja);\n\nconst whenTargetNamedConstraint: (\n  name: string,\n) => (bindingconstraints: BindingConstraints) => boolean =\n  (name: string) =>\n  (bindingconstraints: BindingConstraints): boolean =>\n    bindingconstraints.name === name;\n\ncontainer\n  .bind<Weapon>(weaponId)\n  .to(Katana)\n  .when(whenTargetNamedConstraint('katana'));\n\ncontainer\n  .bind<Weapon>(weaponId)\n  .to(Shuriken)\n  .when(whenTargetNamedConstraint('shuriken'));\n\nconst ninja: Ninja = container.get(ninjaId);\n\n// Returns 5\nconst ninjaDamage: number = ninja.weapon.damage;"}}]);