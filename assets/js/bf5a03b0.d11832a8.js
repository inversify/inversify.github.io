"use strict";(self.webpackChunk_inversifyjs_inversify_docs_site=self.webpackChunk_inversifyjs_inversify_docs_site||[]).push([["2361"],{4989:function(e,i,n){n.r(i),n.d(i,{frontMatter:()=>l,toc:()=>o,default:()=>u,metadata:()=>r,assets:()=>d,contentTitle:()=>a});var r=JSON.parse('{"id":"api/lazy-service-identifier","title":"LazyServiceIdentifier","description":"Overview","source":"@site/versioned_docs/version-6.x/api/lazy-service-identifier.mdx","sourceDirName":"api","slug":"/api/lazy-service-identifier","permalink":"/docs/6.x/api/lazy-service-identifier","draft":false,"unlisted":false,"tags":[],"version":"6.x","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"LazyServiceIdentifier"},"sidebar":"tutorialSidebar","previous":{"title":"Decorator","permalink":"/docs/6.x/api/decorator"},"next":{"title":"ServiceIdentifier","permalink":"/docs/6.x/api/service-identifier"}}'),s=n(4076),t=n(9221),c=n(7419);let l={sidebar_position:5,title:"LazyServiceIdentifier"},a="LazyServiceIdentifier",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Problem: Accessing Class Service Identifiers Prematurely",id:"problem-accessing-class-service-identifiers-prematurely",level:2},{value:"Solution: LazyServiceIdentifier",id:"solution-lazyserviceidentifier",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Methods",id:"methods",level:3},{value:"unwrap(): ServiceIdentifier&lt;TInstance&gt;",id:"unwrap-serviceidentifiertinstance",level:4},{value:"static is&lt;TInstance&gt;(value: unknown): value is LazyServiceIdentifier&lt;TInstance&gt;",id:"static-istinstancevalue-unknown-value-is-lazyserviceidentifiertinstance",level:4}];function v(e){let i={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"lazyserviceidentifier",children:"LazyServiceIdentifier"})}),"\n",(0,s.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"LazyServiceIdentifier"})," class is a utility that delays the resolution of service identifiers until they're actually needed during dependency injection. Its primary purpose is to prevent accessing class service identifiers before they're fully initialized."]}),"\n",(0,s.jsx)(i.h2,{id:"problem-accessing-class-service-identifiers-prematurely",children:"Problem: Accessing Class Service Identifiers Prematurely"}),"\n",(0,s.jsx)(i.p,{children:"In TypeScript/JavaScript applications, when you directly reference a class as a service identifier before the class is fully defined, you might encounter initialization issues:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"// ServiceModule.ts\nimport { injectable, inject } from 'inversify';\n\n@injectable()\nexport class Service {\n  // Potential issue - Service class used before fully defined\n  constructor(@inject(AnotherService) private dependency: AnotherService) {}\n}\n\nclass AnotherService {\n  // Implementation\n}\n"})}),"\n",(0,s.jsx)(i.p,{children:"This can lead to several issues:"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsx)(i.li,{children:"TypeScript errors about using variables before they're declared"}),"\n",(0,s.jsx)(i.li,{children:"Runtime errors as the class might not be fully initialized when used as a service identifier"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"solution-lazyserviceidentifier",children:"Solution: LazyServiceIdentifier"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"LazyServiceIdentifier"})," solves this problem by deferring the service identifier resolution until the injection process actually requires it:"]}),"\n",(0,s.jsx)(c.Z,{language:"ts",children:"import { inject, injectable, LazyServiceIdentifier } from 'inversify';\n\n@injectable()\nexport class Service {\n  // Using LazyServiceIdentifier to safely reference the class itself\n  constructor(\n    @inject(new LazyServiceIdentifier(() => AnotherService))\n    public readonly dependency: unknown,\n  ) {}\n}\n\n@injectable()\nexport class AnotherService {\n  // Implementation\n}\n"}),"\n",(0,s.jsx)(i.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,s.jsx)(i.h3,{id:"constructor",children:"Constructor"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"constructor(buildServiceId: () => ServiceIdentifier<TInstance>)\n"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"buildServiceId"}),": A function that returns a ",(0,s.jsx)(i.code,{children:"ServiceIdentifier"}),". This function is called only when the service identifier is actually needed."]}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(i.h4,{id:"unwrap-serviceidentifiertinstance",children:"unwrap(): ServiceIdentifier<TInstance>"}),"\n",(0,s.jsx)(i.p,{children:"Returns the resolved service identifier by calling the function provided in the constructor."}),"\n",(0,s.jsx)(i.h4,{id:"static-istinstancevalue-unknown-value-is-lazyserviceidentifiertinstance",children:"static is<TInstance>(value: unknown): value is LazyServiceIdentifier<TInstance>"}),"\n",(0,s.jsxs)(i.p,{children:["Checks if a value is an instance of ",(0,s.jsx)(i.code,{children:"LazyServiceIdentifier"}),"."]})]})}function u(e={}){let{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(v,{...e})}):v(e)}}}]);