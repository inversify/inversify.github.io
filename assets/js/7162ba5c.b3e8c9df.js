"use strict";(self.webpackChunk_inversifyjs_inversify_docs_site=self.webpackChunk_inversifyjs_inversify_docs_site||[]).push([["8565"],{348:function(e,t,r){r.r(t),r.d(t,{frontMatter:()=>n,toc:()=>l,default:()=>u,metadata:()=>s,assets:()=>c,contentTitle:()=>d});var s=JSON.parse('{"id":"ecosystem/framework","title":"Framework","description":"Build type-safe HTTP servers with InversifyJS and ship great DX from day one. The Inversify HTTP framework gives you a cohesive set of building blocks\u2014controllers, decorators, guards, interceptors, middleware, pipes, and error filters\u2014designed to work across multiple adapters (Express 4/5, Fastify, and Hono). It comes with first-class OpenAPI, validation, logging, and authentication integrations so you can move from idea to production without reinventing the web layer.","source":"@site/docs/ecosystem/framework.mdx","sourceDirName":"ecosystem","slug":"/ecosystem/framework","permalink":"/docs/next/ecosystem/framework","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Framework"},"sidebar":"tutorialSidebar","previous":{"title":"Binding Decorators","permalink":"/docs/next/ecosystem/binding-decorators"}}'),o=r(6820),a=r(7588),i=r(424);let n={sidebar_position:2,title:"Framework"},d="Inversify HTTP Framework",c={},l=[{value:"What it is",id:"what-it-is",level:2},{value:"Choose your HTTP runtime",id:"choose-your-http-runtime",level:2},{value:"Cross-cutting concerns, first class",id:"cross-cutting-concerns-first-class",level:2},{value:"Responses your way",id:"responses-your-way",level:2},{value:"OpenAPI and documentation",id:"openapi-and-documentation",level:2},{value:"Validation that fits your style",id:"validation-that-fits-your-style",level:2},{value:"Authentication with Better Auth",id:"authentication-with-better-auth",level:2},{value:"Logging that feels at home",id:"logging-that-feels-at-home",level:2},{value:"Learn more and get started",id:"learn-more-and-get-started",level:2}];function h(e){let t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"inversify-http-framework",children:"Inversify HTTP Framework"})}),"\n",(0,o.jsx)(t.p,{children:"Build type-safe HTTP servers with InversifyJS and ship great DX from day one. The Inversify HTTP framework gives you a cohesive set of building blocks\u2014controllers, decorators, guards, interceptors, middleware, pipes, and error filters\u2014designed to work across multiple adapters (Express 4/5, Fastify, and Hono). It comes with first-class OpenAPI, validation, logging, and authentication integrations so you can move from idea to production without reinventing the web layer."}),"\n",(0,o.jsx)(t.h2,{id:"what-it-is",children:"What it is"}),"\n",(0,o.jsxs)(t.p,{children:["At its core, the framework brings InversifyJS Dependency Injection to your HTTP stack with a clean, decorator-driven programming model. Define controllers with ",(0,o.jsx)(t.code,{children:"@Controller()"})," and declare routes with method decorators like ",(0,o.jsx)(t.code,{children:"@Get()"})," and ",(0,o.jsx)(t.code,{children:"@Post()"}),". Parameter decorators make it easy to read request data (body, query, params, headers, cookies) in a type-safe way, while the container handles wiring so your application code stays focused on business logic."]}),"\n",(0,o.jsx)(t.h2,{id:"choose-your-http-runtime",children:"Choose your HTTP runtime"}),"\n",(0,o.jsx)(t.p,{children:"Write your application once and run it on Express 4, Express 5, Fastify, or Hono. Most controller code is framework-agnostic by design. When you need full control, you can opt into native request/response types for a specific adapter; otherwise, just return values from your handlers and let the adapter shape the HTTP response for you."}),"\n",(0,o.jsx)(t.h2,{id:"cross-cutting-concerns-first-class",children:"Cross-cutting concerns, first class"}),"\n",(0,o.jsx)(t.p,{children:"Real applications need structure around routing. The framework offers dedicated primitives to keep concerns separate and testable. Guards make authorization decisions and can short-circuit a request before it reaches your handler. Interceptors run around the handler, perfect for metrics, tracing, or transforming the return value. Middleware gives you adapter-native access when you want to set headers or integrate third-party libraries. Pipes let you transform or validate individual parameters right after they're read from the request. Error filters provide a centralized way to turn thrown errors into consistent HTTP responses. Each primitive can be applied globally, per controller, or per route."}),"\n",(0,o.jsx)(t.h2,{id:"responses-your-way",children:"Responses your way"}),"\n",(0,o.jsxs)(t.p,{children:["You decide how responses are produced. The default is simple: return a value and the adapter will send it (objects as JSON, strings as text, streams as streaming responses). For advanced scenarios, switch to native types and manage the response lifecycle yourself\u2014set status codes, write headers, stream payloads, and call the adapter's ",(0,o.jsx)(t.code,{children:"next()"})," when appropriate."]}),"\n",(0,o.jsx)(t.h2,{id:"openapi-and-documentation",children:"OpenAPI and documentation"}),"\n",(0,o.jsx)(t.p,{children:"Generate OpenAPI 3.1 specifications straight from your controllers and serve an interactive Swagger UI with the provided Swagger UI provider. Your documentation stays in sync with your code, and consumers get a polished experience without extra tooling."}),"\n",(0,o.jsx)(t.h2,{id:"validation-that-fits-your-style",children:"Validation that fits your style"}),"\n",(0,o.jsx)(t.p,{children:"Pick the validation approach that works for you. Use Ajv for JSON Schema, class-validator for decorator-based validation on classes, or Standard Schema to plug in modern TypeScript-first libraries like Zod, Valibot, or ArkType. Validation integrates through pipes and error filters so invalid input becomes clear, consistent HTTP responses."}),"\n",(0,o.jsx)(t.h2,{id:"authentication-with-better-auth",children:"Authentication with Better Auth"}),"\n",(0,o.jsx)(t.p,{children:"The Better Auth integration makes it straightforward to add secure, type-safe authentication flows. Container modules set up the required endpoints and middleware for your chosen adapter, and parameter decorators give your controllers convenient access to session information."}),"\n",(0,o.jsx)(t.h2,{id:"logging-that-feels-at-home",children:"Logging that feels at home"}),"\n",(0,o.jsx)(t.p,{children:"Use the logging utilities to record application activity with a simple, extensible API. Choose transports that match your deployment and keep contextual information close to where logs are emitted."}),"\n",(0,o.jsx)(t.h2,{id:"learn-more-and-get-started",children:"Learn more and get started"}),"\n",(0,o.jsx)(t.p,{children:"The dedicated Framework site includes step-by-step guides, API references, and runnable examples for every adapter. Start here:"}),"\n",(0,o.jsx)(i.A,{href:"https://inversify.io/framework/",target:"_blank",children:(0,o.jsx)("span",{children:"View Full Documentation"})}),"\n",(0,o.jsx)(t.p,{children:"If you're already using InversifyJS for DI, this is the fastest path to a cohesive, testable HTTP stack."})]})}function u(e={}){let{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},424:function(e,t,r){r.d(t,{A:()=>a});var s=r(6820),o=r(5805);r(5080);function a({href:e,children:t,target:r}){return(0,s.jsx)("div",{className:"buttonContainer_jyGP",children:(0,s.jsxs)(o.A,{to:e,target:r,rel:"noopener noreferrer",className:"documentationButton_Sex6",children:[(0,s.jsx)("span",{className:"buttonText_NSOW",children:t}),(0,s.jsx)("span",{className:"buttonIcon_fV4z",children:"\uD83D\uDCD6"}),(0,s.jsx)("div",{className:"shimmer_GGMR"})]})})}}}]);