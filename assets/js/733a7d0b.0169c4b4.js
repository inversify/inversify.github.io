"use strict";(self.webpackChunk_inversifyjs_inversify_docs_site=self.webpackChunk_inversifyjs_inversify_docs_site||[]).push([["9747"],{960:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>s,toc:()=>l,default:()=>u,metadata:()=>a,assets:()=>d,contentTitle:()=>o});var a=JSON.parse('{"id":"fundamentals/lifecycle/middleware","title":"Middleware","description":"Middleware docs are included for historical reasons. They are likely to be remove in favor of more appropiate features.","source":"@site/versioned_docs/version-6.x/fundamentals/lifecycle/middleware.mdx","sourceDirName":"fundamentals/lifecycle","slug":"/fundamentals/lifecycle/middleware","permalink":"/docs/6.x/fundamentals/lifecycle/middleware","draft":false,"unlisted":false,"tags":[],"version":"6.x","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Middleware"},"sidebar":"tutorialSidebar","previous":{"title":"Deactivation","permalink":"/docs/6.x/fundamentals/lifecycle/deactivation"},"next":{"title":"Inheritance","permalink":"/docs/6.x/fundamentals/inheritance"}}'),r=t(9970),i=t(3455);let s={sidebar_position:3,title:"Middleware"},o="Middleware",d={},l=[{value:"Basic middleware",id:"basic-middleware",level:2},{value:"Multiple middleware functions",id:"multiple-middleware-functions",level:2},{value:"Context interceptor",id:"context-interceptor",level:2},{value:"Custom metadata reader",id:"custom-metadata-reader",level:2}];function c(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"middleware",children:"Middleware"})}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"Middleware docs are included for historical reasons. They are likely to be remove in favor of more appropiate features."})}),"\n",(0,r.jsx)(n.p,{children:"Middlewares can be added to a container in order to intercept service resolution requests:"}),"\n",(0,r.jsx)(n.h2,{id:"basic-middleware",children:"Basic middleware"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { interfaces, Container } from "inversify";\n\nfunction logger(planAndResolve: interfaces.Next): interfaces.Next {\n    return (args: interfaces.NextArgs) => {\n        let start = new Date().getTime();\n        let result = planAndResolve(args);\n        let end = new Date().getTime();\n        console.log(`wooooo  ${end - start}`);\n        return result;\n    };\n}\n\nlet container = new Container();\ncontainer.applyMiddleware(logger);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"multiple-middleware-functions",children:"Multiple middleware functions"}),"\n",(0,r.jsx)(n.p,{children:"When multiple middleware functions are applied:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"container.applyMiddleware(middleware1, middleware2);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The middleware will be invoked from right to left.\nThis means that ",(0,r.jsx)(n.code,{children:"middleware2"})," is invoked before ",(0,r.jsx)(n.code,{children:"middleware1"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"context-interceptor",children:"Context interceptor"}),"\n",(0,r.jsx)(n.p,{children:"In some cases you may want to intercept the resolution plan."}),"\n",(0,r.jsxs)(n.p,{children:["The default ",(0,r.jsx)(n.code,{children:"contextInterceptor"})," is passed to the middleware as an property of ",(0,r.jsx)(n.code,{children:"args"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function middleware1(planAndResolve: interfaces.Next): interfaces.Next<unknown> {\n    return (args: interfaces.NextArgs) => {\n        // args.nextContextInterceptor\n        // ...\n    };\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can extend the default ",(0,r.jsx)(n.code,{children:"contextInterceptor"})," using a function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"function middleware1(planAndResolve: interfaces.Next<unknown>): interfaces.Next<unknown> {\n    return (args: interfaces.NextArgs) => {\n        let nextContextInterceptor = args.contextInterceptor;\n        args.contextInterceptor = (context: interfaces.Context) => {\n            console.log(context);\n            return nextContextInterceptor(context);\n        };\n        return planAndResolve(args);\n    };\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"custom-metadata-reader",children:"Custom metadata reader"}),"\n",(0,r.jsxs)(n.admonition,{type:"danger",children:[(0,r.jsx)(n.p,{children:"It is not recommended to create your own custom\nmetadata reader. We have included this feature to allow library / framework creators\nto have a higher level of customization but the average user should not use a custom\nmetadata reader. In general, a custom metadata reader should only be used when\ndeveloping a framework in order to provide users with an annotation APIs\nless explicit than the default annotation API."}),(0,r.jsxs)(n.p,{children:["If you are developing a framework or library and you create a custom metadata reader,\nPlease remember to provide your framework with support for an alternative for all the\ndecorators in the default API: ",(0,r.jsx)(n.code,{children:"@injectable"}),", ",(0,r.jsx)(n.code,{children:"@inject"}),", ",(0,r.jsx)(n.code,{children:"@multiInject"}),", ",(0,r.jsx)(n.code,{children:"@tagged"}),",\n",(0,r.jsx)(n.code,{children:"@named"}),", ",(0,r.jsx)(n.code,{children:"@optional"}),", ",(0,r.jsx)(n.code,{children:"@postConstruct"}),", ",(0,r.jsx)(n.code,{children:"@preDestroy"})," ",(0,r.jsx)(n.code,{children:"@targetName"})," & ",(0,r.jsx)(n.code,{children:"@unmanaged"}),"."]})]}),"\n",(0,r.jsx)(n.p,{children:"Middleware allows you to intercept a plan and resolve it but you are not allowed to change the way the annotation phase behaves."}),"\n",(0,r.jsx)(n.p,{children:"There is a second extension point that allows you to decide what kind of annotation\nsystem you would like to use. The default annotation system is powered by decorators and\nreflect-metadata:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'@injectable()\nclass Ninja implements Ninja {\n\n    private _katana: Katana;\n    private _shuriken: Shuriken;\n\n    constructor(\n        @inject("Katana") katana: Katana,\n        @inject("Shuriken") shuriken: Shuriken\n    ) {\n        this._katana = katana;\n        this._shuriken = shuriken;\n    }\n\n    public fight() { return this._katana.hit(); };\n    public sneak() { return this._shuriken.throw(); };\n\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can use a custom metadata reader to implement a custom annotation system."}),"\n",(0,r.jsx)(n.p,{children:"For example, you could implement an annotation system based on static properties:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'class Ninja implements Ninja {\n\n    public static constructorInjections = [\n        "Katana", "Shuriken"\n    ];\n\n    private _katana: Katana;\n    private _shuriken: Shuriken;\n\n    constructor(\n        katana: Katana,\n        shuriken: Shuriken\n    ) {\n        this._katana = katana;\n        this._shuriken = shuriken;\n    }\n\n    public fight() { return this._katana.hit(); };\n    public sneak() { return this._shuriken.throw(); };\n\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["A custom metadata reader must implement the ",(0,r.jsx)(n.code,{children:"interfaces.MetadataReader"})," interface."]}),"\n",(0,r.jsxs)(n.p,{children:["A full example ",(0,r.jsx)(n.a,{href:"https://github.com/inversify/InversifyJS/blob/master/test/features/metadata_reader.test.ts",children:"can be found in our unit tests"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Once you have a custom metadata reader you will be ready to apply it:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let container = new Container();\ncontainer.applyCustomMetadataReader(new StaticPropsMetadataReader());\n"})})]})}function u(e={}){let{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);