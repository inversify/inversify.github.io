"use strict";(self.webpackChunk_inversifyjs_inversify_docs_site=self.webpackChunk_inversifyjs_inversify_docs_site||[]).push([["179"],{8589:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>l,toc:()=>d,default:()=>h,metadata:()=>t,assets:()=>r,contentTitle:()=>o});var t=JSON.parse('{"id":"fundamentals/plugins","title":"Plugins","description":"InversifyJS provides a plugin system that allows you to extend the container\'s functionality. Plugins can add new methods to the container, hook into the container\'s lifecycle, and interact with the container\'s internal services.","source":"@site/versioned_docs/version-7.x/fundamentals/plugins.mdx","sourceDirName":"fundamentals","slug":"/fundamentals/plugins","permalink":"/docs/fundamentals/plugins","draft":false,"unlisted":false,"tags":[],"version":"7.x","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Plugins"},"sidebar":"tutorialSidebar","previous":{"title":"Inheritance","permalink":"/docs/fundamentals/inheritance"},"next":{"title":"Snapshot","permalink":"/docs/fundamentals/snapshot"}}'),s=i(9970),a=i(7245);let l={sidebar_position:5,title:"Plugins"},o="Plugins",r={},d=[{value:"Creating a Plugin",id:"creating-a-plugin",level:2},{value:"Plugin Context",id:"plugin-context",level:2},{value:"Registering a Plugin",id:"registering-a-plugin",level:2},{value:"Plugin API",id:"plugin-api",level:2},{value:"define",id:"define",level:3},{value:"onPlan",id:"onplan",level:3}];function c(e){let n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"plugins",children:"Plugins"})}),"\n",(0,s.jsx)(n.p,{children:"InversifyJS provides a plugin system that allows you to extend the container's functionality. Plugins can add new methods to the container, hook into the container's lifecycle, and interact with the container's internal services."}),"\n",(0,s.jsx)(n.h2,{id:"creating-a-plugin",children:"Creating a Plugin"}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsx)(n.p,{children:"Plugins are, at the moment, an experimental feature and may change in future releases. Use them at your own risk."})}),"\n",(0,s.jsxs)(n.p,{children:["To create a plugin, you need to extend the ",(0,s.jsx)(n.code,{children:"Plugin"})," class from ",(0,s.jsx)(n.code,{children:"@inversifyjs/plugin"})," and implement the ",(0,s.jsx)(n.code,{children:"load"})," method. The ",(0,s.jsx)(n.code,{children:"load"})," method receives a ",(0,s.jsx)(n.code,{children:"PluginApi"})," object that allows the plugin to define new methods on the container and hook into the container's resolution process."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { Plugin, PluginApi, PluginContext } from '@inversifyjs/plugin';\nimport { Container } from 'inversify';\n\n// Extend the container with plugin defined methods\ndeclare module 'inversify' {\n  interface Container {\n    myMethod(...args: any[]): string;\n  }\n}\n\nclass MyPlugin extends Plugin<Container> {\n  public load(api: PluginApi): void {\n    // Define a new method on the container\n    api.define('myMethod', (...args) => {\n      // Implementation of the method\n      return 'Result of myMethod';\n    });\n\n    // Hook into the container's plan phase\n    api.onPlan((options, result) => {\n      // Do something with the plan result\n      console.log(`Planning resolution for ${String(options.serviceId)}`);\n    });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"plugin-context",children:"Plugin Context"}),"\n",(0,s.jsx)(n.p,{children:"When a plugin is created, it receives a container instance and a plugin context. The plugin context provides access to the container's internal services:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"activationService"}),": Manages the activation handlers for services (binding activation is set in the binding)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bindingService"}),": Manages the bindings in the container."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"deactivationService"}),": Manages the deactivation handlers for services (binding deactivation is set in the binding)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"planResultCacheService"}),": Manages the cache of plan results."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"These services allow plugins to interact with the container's core functionality and provide advanced extensions."}),"\n",(0,s.jsx)(n.h2,{id:"registering-a-plugin",children:"Registering a Plugin"}),"\n",(0,s.jsxs)(n.p,{children:["To use a plugin, you need to register it with the container using the ",(0,s.jsx)(n.code,{children:"register"})," method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const container = new Container();\ncontainer.register(MyPlugin);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Once registered, the plugin can add methods to the container, hook into the container's lifecycle, and modify the container's behavior."}),"\n",(0,s.jsx)(n.h2,{id:"plugin-api",children:"Plugin API"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"PluginApi"})," interface provides the following methods:"]}),"\n",(0,s.jsx)(n.h3,{id:"define",children:"define"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"define(name: string | symbol, method: (...args: any[]) => unknown): void\n"})}),"\n",(0,s.jsx)(n.p,{children:"Defines a new method on the container. The method will be available on the container instance after the plugin is registered."}),"\n",(0,s.jsx)(n.h3,{id:"onplan",children:"onPlan"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"onPlan(handler: (options: GetPlanOptions, result: PlanResult) => void): void\n"})}),"\n",(0,s.jsx)(n.p,{children:"Registers a handler that is called when the container plans a resolution. This can be used to modify the resolution plan or perform additional actions during the resolution process."}),"\n",(0,s.jsx)(n.p,{children:"Plugins provide a clean way to extend InversifyJS without modifying its core code, allowing for modular and maintainable extensions."})]})}function h(e={}){let{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);