"use strict";(self.webpackChunk_inversifyjs_inversify_docs_site=self.webpackChunk_inversifyjs_inversify_docs_site||[]).push([["1898"],{8474:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>p,toc:()=>m,default:()=>y,metadata:()=>a,assets:()=>u,contentTitle:()=>h});var a=JSON.parse('{"id":"api/decorate","title":"decorate","description":"Overview","source":"@site/versioned_docs/version-7.x/api/decorate.mdx","sourceDirName":"api","slug":"/api/decorate","permalink":"/docs/api/decorate","draft":false,"unlisted":false,"tags":[],"version":"7.x","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"decorate"},"sidebar":"tutorialSidebar","previous":{"title":"Decorator","permalink":"/docs/api/decorator"},"next":{"title":"LazyServiceIdentifier","permalink":"/docs/api/lazy-service-identifier"}}'),o=r(9970),t=r(7245),i=r(7676),s=r(7753),c=r(7527),l=r(3679),d=r(126);let p={sidebar_position:5,title:"decorate"},h="decorate",u={},m=[{value:"Overview",id:"overview",level:2},{value:"API Reference",id:"api-reference",level:2},{value:"Examples",id:"examples",level:2},{value:"Applying ClassDecorator",id:"applying-classdecorator",level:3},{value:"Applying ParameterDecorator",id:"applying-parameterdecorator",level:3},{value:"Applying PropertyDecorator",id:"applying-propertydecorator",level:3},{value:"Applying MethodDecorator",id:"applying-methoddecorator",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"Working with Third-Party Classes",id:"working-with-third-party-classes",level:3},{value:"Conditional Decoration",id:"conditional-decoration",level:3},{value:"Important Notes",id:"important-notes",level:2}];function g(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"decorate",children:"decorate"})}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"decorate"})," function is a utility that allows you to apply decorators programmatically to classes, methods, properties, and constructor parameters without using the decorator syntax (",(0,o.jsx)(n.code,{children:"@decorator"}),"). This is particularly useful when:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"You can't modify the original class to add decorators"}),"\n",(0,o.jsx)(n.li,{children:"You're working with third-party classes"}),"\n",(0,o.jsx)(n.li,{children:"You want to conditionally apply decorators"}),"\n",(0,o.jsx)(n.li,{children:"You're in an environment where decorator syntax is not available"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"decorate"})," function has multiple overloads to handle different decorator types:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"function decorate(\n  decorators: ClassDecorator | ClassDecorator[],\n  target: Function\n): void;\n\nfunction decorate(\n  decorators: ParameterDecorator | ParameterDecorator[],\n  target: Function,\n  parameterIndex: number\n): void;\n\nfunction decorate(\n  decorators: MethodDecorator | PropertyDecorator | MethodDecorator[] | PropertyDecorator[],\n  target: Function,\n  property: string | symbol\n): void;\n\nexport function decorate(\n  decorators: ParameterDecorator | ParameterDecorator[],\n  target: Function,\n  methodName: string | symbol,\n  parameterIndex: number,\n): void;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.h3,{id:"applying-classdecorator",children:"Applying ClassDecorator"}),"\n",(0,o.jsxs)(n.p,{children:["Use this to apply class-level decorators like ",(0,o.jsx)(n.code,{children:"@injectable()"}),":"]}),"\n",(0,o.jsx)(d.A,{language:"ts",children:i}),"\n",(0,o.jsx)(n.h3,{id:"applying-parameterdecorator",children:"Applying ParameterDecorator"}),"\n",(0,o.jsxs)(n.p,{children:["Use this to apply decorators to constructor parameters like ",(0,o.jsx)(n.code,{children:"@inject()"}),":"]}),"\n",(0,o.jsx)(d.A,{language:"ts",children:s}),"\n",(0,o.jsx)(n.h3,{id:"applying-propertydecorator",children:"Applying PropertyDecorator"}),"\n",(0,o.jsxs)(n.p,{children:["Use this to apply decorators to class properties like ",(0,o.jsx)(n.code,{children:"@inject()"}),":"]}),"\n",(0,o.jsx)(d.A,{language:"ts",children:c}),"\n",(0,o.jsx)(n.h3,{id:"applying-methoddecorator",children:"Applying MethodDecorator"}),"\n",(0,o.jsx)(n.p,{children:"Use this to apply decorators to class methods:"}),"\n",(0,o.jsx)(d.A,{language:"ts",children:l}),"\n",(0,o.jsx)(n.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,o.jsx)(n.h3,{id:"working-with-third-party-classes",children:"Working with Third-Party Classes"}),"\n",(0,o.jsx)(n.p,{children:"When you need to make a third-party class injectable but cannot modify its source code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { decorate, injectable } from 'inversify';\nimport { SomeThirdPartyClass } from 'some-library';\n\n// Make the third-party class injectable\ndecorate(injectable(), SomeThirdPartyClass);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"conditional-decoration",children:"Conditional Decoration"}),"\n",(0,o.jsx)(n.p,{children:"Apply decorators based on runtime conditions:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { decorate, injectable } from 'inversify';\n\nclass MyService {\n  // Implementation\n}\n\n// Conditionally make it injectable\nif (process.env.NODE_ENV === 'production') {\n  decorate(injectable(), MyService);\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"decorate"})," function must be called before the class is used in container bindings"]}),"\n",(0,o.jsx)(n.li,{children:"For ParameterDecorator, the parameter index is 0-based (first parameter = 0, second = 1, etc.)"}),"\n",(0,o.jsx)(n.li,{children:"You can pass either a single decorator or an array of decorators"}),"\n"]})]})}function y(e={}){let{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}},7676:function(e){e.exports="class Katana implements Weapon {\n  public readonly damage: number = 10;\n}\n\n// Apply @injectable decorator using decorate function\ndecorate(injectable(), Katana);\n\nconst container: Container = new Container();\ncontainer.bind<Weapon>('Weapon').to(Katana);\n\nconst katana: Weapon = container.get<Weapon>('Weapon');"},3679:function(e){e.exports="@injectable()\nclass Katana implements Weapon {\n  private _damage: number = 10;\n\n  public get damage(): number {\n    return this._damage;\n  }\n\n  public improve(): void {\n    this._damage += 2;\n  }\n}\n\n// Apply @postConstruct decorator to method using decorate function\ndecorate(postConstruct(), Katana, 'improve');\n\nconst container: Container = new Container();\ncontainer.bind<Weapon>('Weapon').to(Katana);\n\nconst katana: Katana = container.get<Weapon>('Weapon') as Katana;"},7753:function(e){e.exports="@injectable()\nclass Warrior {\n  private readonly weapon: Weapon;\n\n  constructor(weapon: Weapon) {\n    this.weapon = weapon;\n  }\n\n  public fight(): string {\n    return `Fighting with weapon damage: ${this.weapon.damage.toString()}`;\n  }\n}\n\n// Apply @inject decorator to constructor parameter using decorate function\ndecorate(inject('Weapon'), Warrior, 0);\n\nconst container: Container = new Container();\ncontainer.bind<Weapon>('Weapon').to(Katana);\ncontainer.bind<Warrior>('Warrior').to(Warrior);\n\nconst warrior: Warrior = container.get<Warrior>('Warrior');"},7527:function(e){e.exports="@injectable()\nclass Warrior {\n  public weapon!: Weapon;\n\n  public fight(): string {\n    return `Fighting with weapon damage: ${this.weapon.damage.toString()}`;\n  }\n}\n\n// Apply @inject decorator to property using decorate function\ndecorate(inject('Weapon'), Warrior, 'weapon');\n\nconst container: Container = new Container();\ncontainer.bind<Weapon>('Weapon').to(Katana);\ncontainer.bind<Warrior>('Warrior').to(Warrior);\n\nconst warrior: Warrior = container.get<Warrior>('Warrior');"}}]);