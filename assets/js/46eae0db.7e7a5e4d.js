"use strict";(self.webpackChunk_inversifyjs_inversify_docs_site=self.webpackChunk_inversifyjs_inversify_docs_site||[]).push([["891"],{9602:function(n,e,i){i.r(e),i.d(e,{frontMatter:()=>u,toc:()=>m,default:()=>v,metadata:()=>t,assets:()=>g,contentTitle:()=>p});var t=JSON.parse('{"id":"guides/migrating-from-v6","title":"Migrating from v6","description":"InversifyJS v7 introduces several breaking changes. This guide will help you migrate your existing InversifyJS v6 code to v7.","source":"@site/docs/guides/migrating-from-v6.mdx","sourceDirName":"guides","slug":"/guides/migrating-from-v6","permalink":"/docs/next/guides/migrating-from-v6","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Migrating from v6"},"sidebar":"tutorialSidebar","previous":{"title":"Using bundlers","permalink":"/docs/next/faq/using-bundlers"},"next":{"title":"Binding Decorators","permalink":"/docs/next/ecosystem/binding-decorators"}}'),d=i(9970),r=i(3455),a=i(2062),o=i(5028),s=i(8229),c=i(286),l=i(4773),h=i(1654),x=i(3576),j=i(3617);let u={sidebar_position:1,title:"Migrating from v6"},p="Migrating from v6",g={},m=[{value:"Overview of Changes",id:"overview-of-changes",level:2},{value:"Container API",id:"container-api",level:2},{value:"Autobinding",id:"autobinding",level:3},{value:"Custom Metadata and Middlewares",id:"custom-metadata-and-middlewares",level:3},{value:"<code>isBound</code>-like Methods",id:"isbound-like-methods",level:3},{value:"<code>get</code>-like Methods",id:"get-like-methods",level:3},{value:"<code>load</code> and <code>unload</code> Methods",id:"load-and-unload-methods",level:3},{value:"<code>rebind</code> Method",id:"rebind-method",level:3},{value:"<code>unbind</code> and <code>unbindAll</code> Methods",id:"unbind-and-unbindall-methods",level:3},{value:"Parent and Child Containers",id:"parent-and-child-containers",level:3},{value:"ContainerModule API",id:"containermodule-api",level:2},{value:"BindingFluentSyntax API",id:"bindingfluentsyntax-api",level:2},{value:"<code>ResolutionContext</code> Instead of <code>interfaces.Context</code>",id:"resolutioncontext-instead-of-interfacescontext",level:3},{value:"<code>BindingConstraints</code> Instead of <code>interfaces.Request</code>",id:"bindingconstraints-instead-of-interfacesrequest",level:3},{value:"Decorators API",id:"decorators-api",level:2},{value:"Inheritance",id:"inheritance",level:3}];function b(n){let e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...n.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(e.header,{children:(0,d.jsx)(e.h1,{id:"migrating-from-v6",children:"Migrating from v6"})}),"\n",(0,d.jsx)(e.p,{children:"InversifyJS v7 introduces several breaking changes. This guide will help you migrate your existing InversifyJS v6 code to v7."}),"\n",(0,d.jsx)(e.h2,{id:"overview-of-changes",children:"Overview of Changes"}),"\n",(0,d.jsx)(e.p,{children:"The following table summarizes the key changes from v6 to v7:"}),"\n",(0,d.jsxs)(e.table,{children:[(0,d.jsx)(e.thead,{children:(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.th,{children:"v6"}),(0,d.jsx)(e.th,{children:"v7"}),(0,d.jsx)(e.th,{children:"Comment"})]})}),(0,d.jsxs)(e.tbody,{children:[(0,d.jsxs)(e.tr,{children:[(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"autoBindInjectable"})," option"]}),(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"autobind"})," option"]}),(0,d.jsx)(e.td,{children:"Renamed container constructor option"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.resolve(X)"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.get(X, { autobind: true })"})}),(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"resolve"})," replaced by ",(0,d.jsx)(e.code,{children:"get"})," with ",(0,d.jsx)(e.code,{children:"autobind"})," option"]})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:"Custom metadata and middlewares"}),(0,d.jsx)(e.td,{children:"No direct replacement"}),(0,d.jsx)(e.td,{children:"Removed to simplify the library and avoid exposing internal data structures"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.isBoundNamed"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.isBound(X, { name: ... })"})}),(0,d.jsxs)(e.td,{children:["Merged all ",(0,d.jsx)(e.code,{children:"isBound"})," variants with an options parameter"]})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.isBoundTagged"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.isBound(X, { tag: ... })"})}),(0,d.jsxs)(e.td,{children:["Merged all ",(0,d.jsx)(e.code,{children:"isBound"})," variants with an options parameter"]})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.getNamed"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.get(X, { name: ... })"})}),(0,d.jsxs)(e.td,{children:["Merged all ",(0,d.jsx)(e.code,{children:"get"})," variants with an options parameter"]})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.getTagged"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.get(X, { tag: ... })"})}),(0,d.jsxs)(e.td,{children:["Merged all ",(0,d.jsx)(e.code,{children:"get"})," variants with an options parameter"]})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.tryGet"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.get(X, { optional: true })"})}),(0,d.jsxs)(e.td,{children:["Added ",(0,d.jsx)(e.code,{children:"optional"})," flag for optional ",(0,d.jsx)(e.code,{children:"get"})]})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.tryGetNamed"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.get(X, { name: ..., optional: true })"})}),(0,d.jsx)(e.td,{children:"Combined named and optional parameters"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.tryGetTagged"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.get(X, { tag: ..., optional: true })"})}),(0,d.jsx)(e.td,{children:"Combined tagged and optional parameters"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.load"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"await container.load"})}),(0,d.jsx)(e.td,{children:"Now returns a Promise"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.load"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.loadSync"})}),(0,d.jsxs)(e.td,{children:["Synchronous alternative to async ",(0,d.jsx)(e.code,{children:"load"})]})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.unload"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"await container.unload"})}),(0,d.jsx)(e.td,{children:"Now returns a Promise"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.unload"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.unloadSync"})}),(0,d.jsxs)(e.td,{children:["Synchronous alternative to async ",(0,d.jsx)(e.code,{children:"unload"})]})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.rebind"})}),(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"await container.rebind"})," or ",(0,d.jsx)(e.code,{children:"container.rebindSync"})]}),(0,d.jsx)(e.td,{children:"Now async, with a sync alternative"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.unbind"})}),(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"await container.unbind"})," or ",(0,d.jsx)(e.code,{children:"container.unbindSync"})]}),(0,d.jsx)(e.td,{children:"Now async, with a sync alternative"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"container.createChild()"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"new Container({ parent: container })"})}),(0,d.jsx)(e.td,{children:"Child containers created via constructor"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"interfaces.Context"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"ResolutionContext"})}),(0,d.jsx)(e.td,{children:"Updated context parameter type in the binding API"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"interfaces.Request"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"BindingConstraints"})}),(0,d.jsx)(e.td,{children:"Updated binding constraint parameter type"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"interfaces.Provider<T>"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"Provider<T>"})}),(0,d.jsxs)(e.td,{children:["Directly exported, no longer under ",(0,d.jsx)(e.code,{children:"interfaces"})," namespace"]})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"interfaces.Factory<T>"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"Factory<T>"})}),(0,d.jsxs)(e.td,{children:["Directly exported, no longer under ",(0,d.jsx)(e.code,{children:"interfaces"})," namespace"]})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"interfaces.Newable<T>"})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:"Newable<T>"})}),(0,d.jsxs)(e.td,{children:["Directly exported, no longer under ",(0,d.jsx)(e.code,{children:"interfaces"})," namespace"]})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:"Implicit injection inheritance"}),(0,d.jsxs)(e.td,{children:[(0,d.jsx)(e.code,{children:"@injectFromBase"})," decorator"]}),(0,d.jsx)(e.td,{children:"Explicit inheritance with a decorator"})]}),(0,d.jsxs)(e.tr,{children:[(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:'import { interfaces } from "inversify";'})}),(0,d.jsx)(e.td,{children:(0,d.jsx)(e.code,{children:'import { ... } from "inversify7";'})}),(0,d.jsxs)(e.td,{children:["Removed ",(0,d.jsx)(e.code,{children:"interfaces"})," namespace, use direct imports"]})]})]})]}),"\n",(0,d.jsx)(e.h2,{id:"container-api",children:"Container API"}),"\n",(0,d.jsx)(e.h3,{id:"autobinding",children:"Autobinding"}),"\n",(0,d.jsxs)(e.p,{children:["In v6, autobinding was enabled by passing the ",(0,d.jsx)(e.code,{children:"autoBindInjectable"})," option to the container constructor. In v7, this option has been renamed to ",(0,d.jsx)(e.code,{children:"autobind"})," and can be passed either as part of the ",(0,d.jsx)(e.code,{children:"Container"})," constructor options or ",(0,d.jsx)(e.code,{children:"Container.get"})," options."]}),"\n",(0,d.jsxs)(e.p,{children:["In v6, ",(0,d.jsx)(e.code,{children:"container.resolve"})," automatically bound the resolved service to the container. In v7, this behavior has been removed. To enable it, pass the ",(0,d.jsx)(e.code,{children:"autobind"})," option."]}),"\n",(0,d.jsx)(j.A,{language:"ts",children:x}),"\n",(0,d.jsx)(e.h3,{id:"custom-metadata-and-middlewares",children:"Custom Metadata and Middlewares"}),"\n",(0,d.jsx)(e.p,{children:"This feature has been removed in v7 with no direct replacement. It was not widely used and contributed to the library's complexity. A better API may be introduced in the future."}),"\n",(0,d.jsxs)(e.h3,{id:"isbound-like-methods",children:[(0,d.jsx)(e.code,{children:"isBound"}),"-like Methods"]}),"\n",(0,d.jsxs)(e.p,{children:["Methods like ",(0,d.jsx)(e.code,{children:"Container.isBoundNamed"})," and ",(0,d.jsx)(e.code,{children:"Container.isBoundTagged"})," have been replaced by ",(0,d.jsx)(e.code,{children:"Container.isBound"})," with an optional ",(0,d.jsx)(e.code,{children:"isBoundOptions"})," parameter to handle named and tagged bindings."]}),"\n",(0,d.jsxs)(e.p,{children:["Refer to the API documentation for ",(0,d.jsx)(e.a,{href:"../../api/container#isbound",children:"isBound"})," and ",(0,d.jsx)(e.a,{href:"../../api/container#iscurrentbound",children:"isCurrentBound"})," for more details."]}),"\n",(0,d.jsxs)(e.h3,{id:"get-like-methods",children:[(0,d.jsx)(e.code,{children:"get"}),"-like Methods"]}),"\n",(0,d.jsxs)(e.p,{children:["The ",(0,d.jsx)(e.code,{children:"Container.getNamed"}),", ",(0,d.jsx)(e.code,{children:"Container.getTagged"}),", ",(0,d.jsx)(e.code,{children:"Container.tryGet"}),", ",(0,d.jsx)(e.code,{children:"Container.tryGetNamed"}),", and ",(0,d.jsx)(e.code,{children:"Container.tryGetTagged"})," methods have been replaced by ",(0,d.jsx)(e.code,{children:"Container.get"})," with an ",(0,d.jsx)(e.code,{children:"OptionalGetOptions"})," parameter."]}),"\n",(0,d.jsxs)(e.p,{children:["Similarly, ",(0,d.jsx)(e.code,{children:"Container.getAll"}),", ",(0,d.jsx)(e.code,{children:"Container.getAllAsync"}),", and ",(0,d.jsx)(e.code,{children:"Container.getAsync"})," now accept a ",(0,d.jsx)(e.code,{children:"GetOptions"})," object to specify names or tags."]}),"\n",(0,d.jsx)(j.A,{language:"ts",children:c}),"\n",(0,d.jsxs)(e.p,{children:["Additionally, ",(0,d.jsx)(e.code,{children:"Container.getAll"})," and ",(0,d.jsx)(e.code,{children:"Container.getAllAsync"})," now enforce binding constraints. For example:"]}),"\n",(0,d.jsx)(j.A,{language:"ts",children:s}),"\n",(0,d.jsxs)(e.p,{children:["In v6, ",(0,d.jsx)(e.code,{children:"container.getAll"})," returned all bindings matching the service identifier. In v7, it only returns bindings that match both the service identifier and binding constraints."]}),"\n",(0,d.jsx)(e.admonition,{type:"info",children:(0,d.jsxs)(e.p,{children:["If you need to simulate the old behavior, you can use custom constraints to accomplish this. Refer to this ",(0,d.jsx)(e.a,{href:"https://github.com/inversify/InversifyJS/issues/1796#issuecomment-2842402397",children:"issue"})," for more information."]})}),"\n",(0,d.jsxs)(e.h3,{id:"load-and-unload-methods",children:[(0,d.jsx)(e.code,{children:"load"})," and ",(0,d.jsx)(e.code,{children:"unload"})," Methods"]}),"\n",(0,d.jsxs)(e.p,{children:["These methods are now asynchronous and return a Promise. Synchronous alternatives, ",(0,d.jsx)(e.code,{children:"loadSync"})," and ",(0,d.jsx)(e.code,{children:"unloadSync"}),", are also available."]}),"\n",(0,d.jsx)(j.A,{language:"ts",children:l}),"\n",(0,d.jsxs)(e.h3,{id:"rebind-method",children:[(0,d.jsx)(e.code,{children:"rebind"})," Method"]}),"\n",(0,d.jsxs)(e.p,{children:["The ",(0,d.jsx)(e.code,{children:"Container.rebind"})," method is now asynchronous and returns a Promise. A synchronous alternative, ",(0,d.jsx)(e.code,{children:"Container.rebindSync"}),", is also available."]}),"\n",(0,d.jsxs)(e.h3,{id:"unbind-and-unbindall-methods",children:[(0,d.jsx)(e.code,{children:"unbind"})," and ",(0,d.jsx)(e.code,{children:"unbindAll"})," Methods"]}),"\n",(0,d.jsxs)(e.p,{children:["The ",(0,d.jsx)(e.code,{children:"Container.unbind"})," method is now asynchronous and returns a Promise. A synchronous alternative, ",(0,d.jsx)(e.code,{children:"Container.unbindSync"}),", is also available."]}),"\n",(0,d.jsx)(e.h3,{id:"parent-and-child-containers",children:"Parent and Child Containers"}),"\n",(0,d.jsxs)(e.p,{children:["In v6, child containers were created using the ",(0,d.jsx)(e.code,{children:"createChild"})," method. In v7, this method has been removed. Instead, pass the parent container to the constructor of the child container."]}),"\n",(0,d.jsx)(j.A,{language:"ts",children:h}),"\n",(0,d.jsx)(e.h2,{id:"containermodule-api",children:"ContainerModule API"}),"\n",(0,d.jsx)(e.p,{children:"Container module load options are now passed as an object."}),"\n",(0,d.jsx)(j.A,{language:"ts",children:l}),"\n",(0,d.jsx)(e.h2,{id:"bindingfluentsyntax-api",children:"BindingFluentSyntax API"}),"\n",(0,d.jsxs)(e.h3,{id:"resolutioncontext-instead-of-interfacescontext",children:[(0,d.jsx)(e.code,{children:"ResolutionContext"})," Instead of ",(0,d.jsx)(e.code,{children:"interfaces.Context"})]}),"\n",(0,d.jsxs)(e.p,{children:["The ",(0,d.jsx)(e.code,{children:"Context"})," class has been replaced by ",(0,d.jsx)(e.code,{children:"ResolutionContext"})," to simplify the API and hide internal data structures."]}),"\n",(0,d.jsx)(j.A,{language:"ts",children:a}),"\n",(0,d.jsxs)(e.h3,{id:"bindingconstraints-instead-of-interfacesrequest",children:[(0,d.jsx)(e.code,{children:"BindingConstraints"})," Instead of ",(0,d.jsx)(e.code,{children:"interfaces.Request"})]}),"\n",(0,d.jsxs)(e.p,{children:["The ",(0,d.jsx)(e.code,{children:"Request"})," object has been replaced by ",(0,d.jsx)(e.code,{children:"BindingConstraints"})," to simplify the API and hide internal data structures."]}),"\n",(0,d.jsx)(j.A,{language:"ts",children:o}),"\n",(0,d.jsx)(e.h2,{id:"decorators-api",children:"Decorators API"}),"\n",(0,d.jsx)(e.h3,{id:"inheritance",children:"Inheritance"}),"\n",(0,d.jsxs)(e.p,{children:["Injection inheritance is now explicit using the ",(0,d.jsx)(e.code,{children:"@injectFromBase"})," decorator. This provides more control and avoids edge cases related to constructor argument mismatches."]}),"\n",(0,d.jsxs)(e.p,{children:["For more details, refer to the ",(0,d.jsx)(e.a,{href:"../../fundamentals/inheritance",children:"Inheritance documentation"}),"."]})]})}function v(n={}){let{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,d.jsx)(e,{...n,children:(0,d.jsx)(b,{...n})}):b(n)}},2062:function(n){n.exports="@injectable()\nclass Katana {\n  public use(): string {\n    return 'hit!';\n  }\n}\n\ncontainer\n  .bind<Katana>('Katana')\n  .to(Katana)\n  .onActivation((_context: ResolutionContext, katana: Katana) => {\n    const handler: ProxyHandler<() => string> = {\n      apply: function (\n        target: () => string,\n        thisArgument: unknown,\n        argumentsList: [],\n      ) {\n        console.log(`Starting: ${new Date().getTime().toString()}`);\n        const result: string = target.apply(thisArgument, argumentsList);\n        console.log(`Finished: ${new Date().getTime().toString()}`);\n        return result;\n      },\n    };\n\n    katana.use = new Proxy(katana.use.bind(katana), handler);\n\n    return katana;\n  });"},5028:function(n){n.exports="const ninjaId: symbol = Symbol.for('Ninja');\nconst weaponId: symbol = Symbol.for('Weapon');\n\n@injectable()\nclass Ninja {\n  constructor(\n    @inject(weaponId)\n    @named('shuriken')\n    public readonly weapon: Weapon,\n  ) {}\n}\n\ncontainer.bind<Ninja>(ninjaId).to(Ninja);\n\nconst whenTargetNamedConstraint: (\n  name: string,\n) => (bindingconstraints: BindingConstraints) => boolean =\n  (name: string) =>\n  (bindingconstraints: BindingConstraints): boolean =>\n    bindingconstraints.name === name;\n\ncontainer\n  .bind<Weapon>(weaponId)\n  .to(Katana)\n  .when(whenTargetNamedConstraint('katana'));\n\ncontainer\n  .bind<Weapon>(weaponId)\n  .to(Shuriken)\n  .when(whenTargetNamedConstraint('shuriken'));\n\nconst ninja: Ninja = container.get(ninjaId);\n\n// Returns 5\nconst ninjaDamage: number = ninja.weapon.damage;"},8229:function(n){n.exports="const container: Container = new Container();\ncontainer.bind<Weapon>('Weapon').to(Katana);\ncontainer.bind<Weapon>('Weapon').to(Shuriken).whenNamed('ranged');\n\nconst weapons: Weapon[] = container.getAll<Weapon>('Weapon');"},286:function(n){n.exports="const container: Container = new Container();\ncontainer.bind<Weapon>('Weapon').to(Katana).whenNamed('Katana');\n\nconst katana: Weapon = container.get<Weapon>('Weapon', { name: 'Katana' });"},4773:function(n){n.exports="const warriorsModule: ContainerModule = new ContainerModule(\n  (options: ContainerModuleLoadOptions) => {\n    options.bind<Ninja>('Ninja').to(Ninja);\n  },\n);\n\nconst weaponsModule: ContainerModule = new ContainerModule(\n  (options: ContainerModuleLoadOptions) => {\n    options.bind<Katana>('Weapon').to(Katana).whenNamed('Melee');\n    options.bind<Shuriken>('Weapon').to(Shuriken).whenNamed('Ranged');\n  },\n);\n\nawait container.load(warriorsModule, weaponsModule);\n\nconst ninja: Ninja = container.get('Ninja');"},1654:function(n){n.exports="class Katana {}\n\nconst parentContainer: Container = new Container();\nparentContainer.bind(weaponIdentifier).to(Katana);\n\nconst childContainer: Container = new Container({ parent: parentContainer });\n\nconst katana: Katana = childContainer.get(weaponIdentifier);"},3576:function(n){n.exports="export class Katana {\n  public readonly damage: number = 10;\n}\n\n@injectable()\nexport class Samurai {\n  public readonly katana: Katana;\n\n  constructor(katana: Katana) {\n    this.katana = katana;\n  }\n}\n\nconst container: Container = new Container();\n\nconst samurai: Samurai = container.get(Samurai, { autobind: true });"}}]);